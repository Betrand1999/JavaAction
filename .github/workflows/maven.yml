# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    
jobs:
  build:

    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Docker Installation Version
      run: docker --version
    - name: Build Docker Image
      run: docker build -t image_name:latest .
    - name: Get running containers
      run: docker ps
    - name: Check for Running Containers Exposing Port 80
      id: check-container
      run: |
          if docker ps -q --filter "expose=80/tcp" --filter "status=running" > /dev/null; then
            echo "There are running containers exposing port 80."
            echo "containers_exist=true" >> $GITHUB_ENV
          else
            echo "No running containers exposing port 80."
            echo "containers_exist=false" >> $GITHUB_ENV
          fi
    - name: Use the Conditional Output
      env:
        CONTAINERS_EXIST: ${{ steps.check-container.outputs.containers_exist }}
      run: |
          if [ "$CONTAINERS_EXIST" = "true" ]; then
            docker stop $(docker ps -q --filter "expose=80/tcp" --filter "status=running")  
          fi
    - name: Start Docker containers with image_name:latest
      run: docker run -d -p 80:80 image_name:latest


